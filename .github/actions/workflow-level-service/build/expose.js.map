{"version":3,"sources":["../../../../actions/expose.ts"],"names":[],"mappings":"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","sourcesContent":["import * as GithubArtifacts from \"@actions/artifact\";\nimport * as GithubCore from \"@actions/core\";\nimport * as Platform from \"@effect/platform\";\nimport * as PlatformNode from \"@effect/platform-node\";\nimport * as Schema from \"@effect/schema/Schema\";\nimport * as Cause from \"effect/Cause\";\nimport * as ConfigError from \"effect/ConfigError\";\nimport * as Console from \"effect/Console\";\nimport * as Effect from \"effect/Effect\";\nimport * as Function from \"effect/Function\";\nimport * as ReadonlyArray from \"effect/ReadonlyArray\";\nimport * as Schedule from \"effect/Schedule\";\nimport * as Tuple from \"effect/Tuple\";\nimport * as ipAddress from \"ip-address\";\nimport * as dgram from \"node:dgram\";\nimport * as stun from \"stun\";\nimport * as uuid from \"uuid\";\nimport * as Wireguard from \"../src/index.js\";\nimport * as helpers from \"./helpers.js\";\n\nconst processConnectionRequest = (\n    connectionRequest: Readonly<GithubArtifacts.Artifact>\n): Effect.Effect<\n    void,\n    Error | ConfigError.ConfigError | Cause.UnknownException | Platform.Error.PlatformError,\n    Platform.FileSystem.FileSystem | Platform.Path.Path\n> =>\n    Effect.gen(function* (λ) {\n        const service_identifier: number = yield* λ(helpers.SERVICE_IDENTIFIER);\n        const service_cidr: Wireguard.CidrBlock = yield* λ(helpers.SERVICE_CIDR);\n        const client_identifier: string | undefined = connectionRequest.name.split(\"_\")[2];\n\n        // Check that client_identifier is a valid UUID\n        if (!client_identifier || !uuid.validate(client_identifier)) {\n            yield* λ(helpers.deleteArtifact(connectionRequest.name));\n            return yield* λ(Effect.fail(new Error(\"Invalid client identifier in connection request artifact name\")));\n        }\n\n        GithubCore.info(`Processing connection request from client ${client_identifier}`);\n        const data = yield* λ(helpers.downloadSingleFileArtifact(connectionRequest.id, connectionRequest.name));\n        yield* λ(helpers.deleteArtifact(connectionRequest.name));\n\n        // Check that the connection request artifact contents are valid\n        const [clientIp, natPort, hostPort] = data.split(\":\");\n        if (!clientIp || !natPort || !hostPort) {\n            return yield* λ(Effect.fail(new Error(\"Invalid connection request artifact contents\")));\n        }\n\n        const stunSocket = dgram.createSocket(\"udp4\");\n        stunSocket.bind(0);\n        const stunResponse = yield* λ(\n            Effect.promise(() => stun.request(\"stun.l.google.com:19302\", { socket: stunSocket }))\n        );\n        const mappedAddress = stunResponse.getAttribute(stun.constants.STUN_ATTR_XOR_MAPPED_ADDRESS).value;\n        const myLocation = `${mappedAddress.address}:${mappedAddress.port}:${stunSocket.address().port}` as const;\n        GithubCore.info(`Stun response received: ${JSON.stringify(myLocation)}`);\n        yield* λ(\n            Effect.loop(0, {\n                step: (count) => count + 1,\n                while: (count) => count < 5,\n                body: () =>\n                    Effect.sync(() => stunSocket.send(\".\", 0, 1, Number.parseInt(natPort), clientIp)).pipe(\n                        Effect.andThen(Effect.sleep(1000))\n                    ),\n            })\n        );\n\n        const address = `${\"ipv4\" in service_cidr ? service_cidr.ipv4 : service_cidr.ipv6}/${service_cidr.mask}`;\n        const ips =\n            \"ipv4\" in service_cidr\n                ? helpers.getRangeV4(new ipAddress.Address4(address))\n                : helpers.getRangeV6(new ipAddress.Address6(address));\n        const aliceData = Tuple.make(myLocation, ips[1] as string);\n        const bobData = Tuple.make(\n            `${clientIp}:${Number.parseInt(natPort)}:${Number.parseInt(hostPort)}` as const,\n            ips[2] as string\n        );\n        const [aliceConfig, bobConfig] = yield* λ(Wireguard.WireguardConfig.generateP2PConfigs(aliceData, bobData));\n\n        stunSocket.close();\n        yield* λ(aliceConfig.up());\n        const g = yield* λ(Schema.encode(Schema.parseJson(Wireguard.WireguardConfig))(bobConfig));\n        yield* λ(helpers.uploadSingleFileArtifact(`${service_identifier}_connection-response_${client_identifier}`, g));\n    })\n        .pipe(Effect.catchAll(Console.log))\n        .pipe(Effect.catchAllDefect(Console.log));\n\nconst program: Effect.Effect<\n    void,\n    ConfigError.ConfigError | Cause.UnknownException,\n    Platform.FileSystem.FileSystem | Platform.Path.Path\n> = Effect.gen(function* (λ) {\n    const service_identifier: number = yield* λ(helpers.SERVICE_IDENTIFIER);\n    const artifacts: ReadonlyArray<GithubArtifacts.Artifact> = yield* λ(helpers.listArtifacts);\n\n    const [stopRequestName, isStopRequest] = helpers.stopArtifact(service_identifier);\n    const [, isConnectionRequest] = helpers.connectionRequestArtifact(service_identifier);\n\n    if (ReadonlyArray.some(artifacts, isStopRequest)) {\n        yield* λ(helpers.deleteArtifact(stopRequestName));\n        return true;\n    }\n\n    const connectionRequests = ReadonlyArray.filter(artifacts, isConnectionRequest);\n    yield* λ(\n        Function.pipe(\n            connectionRequests,\n            ReadonlyArray.map(processConnectionRequest),\n            ReadonlyArray.map(Effect.forkDaemon),\n            Effect.all\n        )\n    );\n\n    return false;\n}).pipe(\n    Effect.repeat({\n        until: Boolean,\n        schedule: Schedule.spaced(\"30 seconds\"),\n    })\n);\n\n/**\n * Processes connection requests every 30 seconds until there is a stop request\n * or we have a defect (unexpected error).\n */\nEffect.suspend(() => program).pipe(Effect.provide(PlatformNode.NodeContext.layer), PlatformNode.NodeRuntime.runMain);\n"]}