name: CI

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

concurrency:
  cancel-in-progress: true
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: 'true'

      - uses: actions/setup-go@v5
        with:
          cache-dependency-path: |
            submodules/wireguard-go/go.sum

      - uses: actions/setup-node@v4
        with:
          node-version: "18.x"

      - name: "Install pnpm"
        uses: pnpm/action-setup@v3
        with:
          version: 8
          run_install: false

      - name: "Get pnpm store"
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: "Setup pnpm cache"
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-node18.x-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - run: pnpm install
      - run: pnpm check
      - run: pnpm build
      - run: rm -rf submodules/
      - run: rm -rf node_modules/
      - run: rm -rf .git/
      - uses: actions/upload-artifact@v4
        with:
          name: the-wireguard-effect
          path: .

  linux-test:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: the-wireguard-effect
      - uses: actions/setup-node@v4
        with:
          node-version: "18.x"
      - uses: pnpm/action-setup@v3
        with:
          version: 8
      - run: pnpm install
      - run: sudo apt-get install -y wireguard
      - run: pnpm test

  macos-test:
    runs-on: macos-latest
    needs: [build]
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: the-wireguard-effect
      - uses: actions/setup-node@v4
        with:
          node-version: "18.x"
      - uses: pnpm/action-setup@v3
        with:
          version: 8
      - run: pnpm install
      - run: brew install wireguard-tools
      - run: pnpm test

  freebsd-test:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: the-wireguard-effect
      - uses: vmactions/freebsd-vm@v1
        with:
          usesh: true
          sync: rsync
          copyback: false
          prepare: |
            pkg install -y sudo node npm wireguard-tools-1.0.20210914_2
            npm -v
            node -v
            wg-quick --help
            npm install -g pnpm
          run: |
            pnpm install
            pnpm test
      - uses: mxschmitt/action-tmate@v3

  openbsd-test:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: the-wireguard-effect
      - uses: vmactions/openbsd-vm@v1
        with:
          usesh: true
          sync: rsync
          copyback: false
          prepare: |
            pkg_add sudo-1.9.15.5 node wireguard-tools-1.0.20210914p2v0
            npm -v
            node -v
            wg-quick --help
            npm install -g pnpm
          run: |
            pnpm install
            pnpm test

  windows-test:
    if: false
    runs-on: windows-latest
    needs: [build]
    steps:
      - shell: pwsh
        run: dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart
      - shell: pwsh
        run: dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart
      - shell: pwsh
        run: wsl --set-default-version 2
      - shell: pwsh
        run: wsl --update
      # - shell: pwsh
      #   run: wsl --install -d Ubuntu
      # - shell: pwsh
      #   run: wsl --list --verbose
