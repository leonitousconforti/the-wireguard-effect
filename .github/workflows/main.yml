name: CI

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  schedule:
    - cron:  '30 * * * *'

concurrency:
  cancel-in-progress: false
  group: ${{ github.workflow }}

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: 'true'

      - uses: actions/setup-go@v5
        with:
          cache-dependency-path: |
            submodules/wireguard-go/go.sum
      - uses: actions/setup-node@v4
        with:
          node-version: "18.x"

      - name: "Install pnpm"
        uses: pnpm/action-setup@v3
        with:
          version: 9
          run_install: false
      - name: "Get pnpm store"
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
      - name: "Setup pnpm cache"
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-node18.x-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-node18.x-pnpm-store-

      - run: sudo apt-get update
      - run: sudo apt-get install mingw-w64 imagemagick libarchive-tools build-essential flex bison dwarves libssl-dev libelf-dev bc ccache librsvg2-bin fakeroot debhelper libtool-bin cmake -y

      - name: "Setup ccache"
        uses: actions/cache@v4
        with:
          path: /home/runner/.cache/ccache
          key: wsl2-linux-kernel-ccache-${{ hashFiles('submodules/WSL2-modified.patch') }}
          restore-keys: |
            wsl2-linux-kernel-ccache-

      - name: "Setup wireguard windows dist cache"
        uses: actions/cache@v4
        with:
          path: /tmp/wireguard-windows-distfiles
          key: wireguard-windows-dist
      - run: mkdir -p /tmp/wireguard-windows-distfiles/.distfiles/
      - run: cp -r /tmp/wireguard-windows-distfiles/.distfiles/ submodules/wireguard-windows/.distfiles
      - run: ls -la submodules/wireguard-windows/.distfiles

      - run: pnpm install
      - run: pnpm check
      - run: pnpm lint
      - run: pnpm build

      - run: cp -r submodules/wireguard-windows/.distfiles/ /tmp/wireguard-windows-distfiles
      - run: ls -la /tmp/wireguard-windows-distfiles

      - run: sudo rm -rf .git/
      - run: sudo rm -rf node_modules/
      - run: sudo rm -rf submodules/wintun
      - run: sudo rm -rf submodules/nvlist
      - run: sudo rm -rf submodules/osxcross
      - run: sudo rm -rf submodules/wireguard-apple
      - run: sudo rm -rf submodules/wireguard-go
      - run: sudo rm -rf submodules/wireguard-tools
      - run: sudo rm -rf submodules/wireguard-windows
      - run: sudo rm -rf submodules/WSL2-Linux-Kernel
      - uses: actions/upload-artifact@v4
        with:
          name: the-wireguard-effect
          path: .

  linux-test:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [build]
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: the-wireguard-effect
      - uses: actions/setup-node@v4
        with:
          node-version: "18.x"
      - uses: pnpm/action-setup@v3
        with:
          version: 9
      - run: pnpm install
      - run: sudo apt-get install -y openresolv
      - run: |
          sudo chmod +x ./src/*
          sudo groupadd wireguard-control
          sudo usermod -a -G wireguard-control root
          sudo usermod -a -G wireguard-control runner
          sudo mkdir -p /var/run/wireguard/
          sudo chown -R root:wireguard-control /var/run/wireguard/
          sudo setcap "all=ep" ./src/linux-amd64-wireguard-go
      - run: pnpm test
        env:
          HIDDEN_PAGE: ${{ secrets.HIDDEN_PAGE }}
          WIREGUARD_DEMO_HOST: ${{ secrets.WIREGUARD_DEMO_HOST }}
          WIREGUARD_DEMO_PORT: ${{ secrets.WIREGUARD_DEMO_PORT }}

  macos-intel-test:
    runs-on: macos-13
    timeout-minutes: 10
    needs: [build]
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: the-wireguard-effect
      - uses: actions/setup-node@v4
        with:
          node-version: "18.x"
      - uses: pnpm/action-setup@v3
        with:
          version: 9
      - run: pnpm install
      - run: |
          brew install bash
          sudo chmod +x ./src/*
      - run: sudo -E pnpm test
        env:
          HIDDEN_PAGE: ${{ secrets.HIDDEN_PAGE }}
          WIREGUARD_DEMO_HOST: ${{ secrets.WIREGUARD_DEMO_HOST }}
          WIREGUARD_DEMO_PORT: ${{ secrets.WIREGUARD_DEMO_PORT }}

  macos-apple-silicon-test:
    runs-on: macos-14
    timeout-minutes: 10
    needs: [build]
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: the-wireguard-effect
      - uses: actions/setup-node@v4
        with:
          node-version: "18.x"
      - uses: pnpm/action-setup@v3
        with:
          version: 9
      - run: pnpm install
      - run: |
          brew install bash
          sudo chmod +x ./src/*
      - run: sudo -E pnpm test
        env:
          HIDDEN_PAGE: ${{ secrets.HIDDEN_PAGE }}
          WIREGUARD_DEMO_HOST: ${{ secrets.WIREGUARD_DEMO_HOST }}
          WIREGUARD_DEMO_PORT: ${{ secrets.WIREGUARD_DEMO_PORT }}

  freebsd-test:
    runs-on: ubuntu-latest
    # timeout-minutes: 10
    needs: [build]
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: the-wireguard-effect
      - uses: vmactions/freebsd-vm@v1
        with:
          usesh: true
          sync: rsync
          copyback: false
          prepare: |
            pkg install -y sudo node npm bash
            npm -v
            node -v
            npm install -g pnpm
          run: |
            pnpm install
            chmod +x ./src/*
            kldload linux64
            WIREGUARD_DEMO_HOST=${{ secrets.WIREGUARD_DEMO_HOST }} WIREGUARD_DEMO_PORT=${{ SECRETS.WIREGUARD_DEMO_PORT }} HIDDEN_PAGE=${{ secrets.HIDDEN_PAGE }} pnpm test
      - uses: mxschmitt/action-tmate@v3
        if: ${{ failure() }}

  openbsd-test:
    runs-on: ubuntu-latest
    # timeout-minutes: 10
    needs: [build]
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: the-wireguard-effect
      - uses: vmactions/openbsd-vm@v1
        with:
          usesh: true
          sync: rsync
          copyback: false
          prepare: |
            pkg_add sudo-1.9.15.5 node bash
            npm -v
            node -v
            npm install -g pnpm
          run: |
            pnpm install
            chmod +x ./src/*
            WIREGUARD_DEMO_HOST=${{ secrets.WIREGUARD_DEMO_HOST }} WIREGUARD_DEMO_PORT=${{ SECRETS.WIREGUARD_DEMO_PORT }} HIDDEN_PAGE=${{ secrets.HIDDEN_PAGE }} pnpm test
      - uses: mxschmitt/action-tmate@v3
        if: ${{ failure() }}

  windows-test:
    runs-on: windows-latest
    timeout-minutes: 10
    needs: [build]
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: the-wireguard-effect
      - uses: actions/setup-node@v4
        with:
          node-version: "18.x"
      - uses: pnpm/action-setup@v3
        with:
          version: 9
      - run: pnpm install
      - run: C:\\msys64\\usr\\bin\\bash.exe -lc "pnpm test"
        env:
          MSYSTEM: "MINGW64"
          CHERE_INVOKING: "1"
          MSYS2_PATH_TYPE: "inherit"
          HIDDEN_PAGE: ${{ secrets.HIDDEN_PAGE }}
          WIREGUARD_DEMO_HOST: ${{ secrets.WIREGUARD_DEMO_HOST }}
          WIREGUARD_DEMO_PORT: ${{ secrets.WIREGUARD_DEMO_PORT }}

  windows-wsl2-test:
    runs-on: windows-latest
    timeout-minutes: 10
    needs: [build]
    defaults:
      run:
        shell: pwsh
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: the-wireguard-effect

      # Yes all this is necassary to get WSL2 working on GitHub Actions without any user input
      # They are all as separate steps so its easier to debug and see what/where it fails (especially when I was writting this)
      - run: dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart
      - run: dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart
      - run: wsl --set-default-version 2
      - run: wsl --update
      - run: wsl --install --no-distribution
      - run: Invoke-WebRequest -URI https://cloud-images.ubuntu.com/jammy/current/jammy-server-cloudimg-amd64-root.tar.xz -OutFile jammy-server-cloudimg-amd64-root.tar.xz
      - run: wsl --import Ubuntu22.04 . jammy-server-cloudimg-amd64-root.tar.xz --version 2
      - run: wsl --list --verbose
      - run: wsl --shutdown
      - run: Copy-Item "D:\a\the-wireguard-effect\the-wireguard-effect\submodules\.wslconfig" -Destination "C:\Users\runneradmin"
      - run: sleep 15

      # Install dependencies
      - run: wsl --distribution Ubuntu22.04 --user root -- sudo apt-get update
      - run: wsl --distribution Ubuntu22.04 --user root -- sudo apt-get upgrade -y
      - run: wsl --distribution Ubuntu22.04 --user root -- sudo apt-get install -y openresolv
      - run: wsl --distribution Ubuntu22.04 --user root -- curl -sL https://deb.nodesource.com/setup_18.x -o nodesource_setup.sh
      - run: wsl --distribution Ubuntu22.04 --user root -- sudo bash nodesource_setup.sh
      - run: wsl --distribution Ubuntu22.04 --user root -- sudo apt-get install -y nodejs
      - run: wsl --distribution Ubuntu22.04 --user root -- npm install -g pnpm

      # This is where our testing starts
      - run: wsl --distribution Ubuntu22.04 --user root -- pnpm install
      - run: wsl --distribution Ubuntu22.04 --user root -- chmod +x ./src/*
      - run: wsl --distribution Ubuntu22.04 --user root -- ls -la ./src/
      - run: wsl --distribution Ubuntu22.04 --user root -- WIREGUARD_DEMO_HOST=${{ secrets.WIREGUARD_DEMO_HOST }} WIREGUARD_DEMO_PORT=${{ SECRETS.WIREGUARD_DEMO_PORT }} HIDDEN_PAGE=${{ secrets.HIDDEN_PAGE }} pnpm test -- --run
