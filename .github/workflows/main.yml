name: CI

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  schedule:
    - cron:  '30 * * * *'

concurrency:
  cancel-in-progress: false
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: 'true'

      - uses: actions/setup-go@v5
        with:
          cache-dependency-path: |
            submodules/wireguard-go/go.sum
      - uses: actions/setup-node@v4
        with:
          node-version: "18.x"

      - name: "Install pnpm"
        uses: pnpm/action-setup@v3
        with:
          version: 8
          run_install: false
      - name: "Get pnpm store"
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
      - name: "Setup pnpm cache"
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-node18.x-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-node18.x-pnpm-store-

      - run: sudo apt-get update
      - run: sudo apt-get install mingw-w64 imagemagick libarchive-tools build-essential flex bison dwarves libssl-dev libelf-dev bc ccache librsvg2-bin -y
      - name: "Setup ccache"
        uses: actions/cache@v4
        with:
          path: /home/runner/.cache/ccache
          key: wsl2-linux-kernel-ccache-${{ hashFiles('submodules/WSL2-modified.patch') }}
          restore-keys: |
            wsl2-linux-kernel-ccache-

      - run: pnpm install
      - run: pnpm check
      - run: pnpm build
      - uses: actions/upload-artifact@v4
        with:
          name: modified-wsl2-linux-kernel
          path: submodules/WSL2-Linux-Kernel/arch/x86/boot/bzImage

      - run: rm -rf .git/
      - run: rm -rf node_modules/
      - run: rm -rf submodules/wintun
      - run: rm -rf submodules/wireguard-apple
      - run: rm -rf submodules/wireguard-go
      - run: rm -rf submodules/wireguard-tools
      - run: rm -rf submodules/wireguard-windows
      - run: rm -rf submodules/WSL2-Linux-Kernel
      - uses: actions/upload-artifact@v4
        with:
          name: the-wireguard-effect
          path: .

  linux-test:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [build]
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: the-wireguard-effect
      - uses: actions/setup-node@v4
        with:
          node-version: "18.x"
      - uses: pnpm/action-setup@v3
        with:
          version: 8
      - run: pnpm install
      - run: sudo apt-get install -y wireguard openresolv
      - run: pnpm test

  macos-test:
    runs-on: macos-latest
    timeout-minutes: 10
    needs: [build]
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: the-wireguard-effect
      - uses: actions/setup-node@v4
        with:
          node-version: "18.x"
      - uses: pnpm/action-setup@v3
        with:
          version: 8
      - run: pnpm install
      - run: brew install wireguard-tools
      - run: pnpm test

  freebsd-test:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [build]
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: the-wireguard-effect
      - uses: vmactions/freebsd-vm@v1
        with:
          usesh: true
          sync: rsync
          copyback: false
          prepare: |
            pkg install -y sudo node npm wireguard-tools-1.0.20210914_2
            npm -v
            node -v
            wg-quick --help
            npm install -g pnpm
          run: |
            pnpm install
            pnpm test

  openbsd-test:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [build]
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: the-wireguard-effect
      - uses: vmactions/openbsd-vm@v1
        with:
          usesh: true
          sync: rsync
          copyback: false
          prepare: |
            pkg_add sudo-1.9.15.5 node wireguard-tools-1.0.20210914p2v0
            npm -v
            node -v
            wg-quick --help
            npm install -g pnpm
          run: |
            pnpm install
            pnpm test

  windows-test:
    runs-on: windows-latest
    timeout-minutes: 10
    needs: [build]
    defaults:
      run:
        shell: pwsh
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: the-wireguard-effect
      - uses: actions/setup-node@v4
        with:
          node-version: "18.x"
      - uses: pnpm/action-setup@v3
        with:
          version: 8
      - run: pnpm install
      - run: choco install wireguard
      - run: echo "C:\Program Files\WireGuard" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
      - run: wireguard.exe
      - run: pnpm test

  windows-wsl2-test:
    runs-on: windows-latest
    timeout-minutes: 10
    needs: [build]
    defaults:
      run:
        shell: pwsh
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: the-wireguard-effect
      - uses: actions/download-artifact@v4
        with:
          name: modified-wsl2-linux-kernel

      # Yes all this is necassary to get WSL2 working on GitHub Actions without any user input
      # They are all as separate steps so its easier to debug and see what/where it fails (especially when I was writting this)
      - run: dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart
      - run: dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart
      - run: wsl --set-default-version 2
      - run: wsl --update
      - run: wsl --install --no-distribution
      - run: Invoke-WebRequest -URI https://cloud-images.ubuntu.com/jammy/current/jammy-server-cloudimg-amd64-root.tar.xz -OutFile jammy-server-cloudimg-amd64-root.tar.xz
      - run: wsl --import Ubuntu22.04 . jammy-server-cloudimg-amd64-root.tar.xz --version 2
      - run: wsl --list --verbose
      - run: wsl --shutdown
      - run: Copy-Item "D:\a\the-wireguard-effect\the-wireguard-effect\submodules\.wslconfig" -Destination "C:\Users\runneradmin"
      - run: sleep 15

      # Install dependencies
      - run: wsl --distribution Ubuntu22.04 --user root -- sudo apt-get update
      - run: wsl --distribution Ubuntu22.04 --user root -- sudo apt-get upgrade -y
      - run: wsl --distribution Ubuntu22.04 --user root -- sudo apt-get install -y wireguard openresolv
      - run: wsl --distribution Ubuntu22.04 --user root -- curl -sL https://deb.nodesource.com/setup_18.x -o nodesource_setup.sh
      - run: wsl --distribution Ubuntu22.04 --user root -- sudo bash nodesource_setup.sh
      - run: wsl --distribution Ubuntu22.04 --user root -- sudo apt-get install -y nodejs
      - run: wsl --distribution Ubuntu22.04 --user root -- npm install -g pnpm

      # This is where our testing starts
      - run: wsl --distribution Ubuntu22.04 --user root -- pnpm install
      - run: wsl --distribution Ubuntu22.04 --user root -- pnpm test -- --run
