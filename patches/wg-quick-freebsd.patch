diff --git a/src/wg-quick/freebsd.bash b/src/wg-quick/freebsd.bash
index f72daf6..a2188cf 100755
--- a/src/wg-quick/freebsd.bash
+++ b/src/wg-quick/freebsd.bash
@@ -23,7 +23,6 @@ PRE_UP=( )
 POST_UP=( )
 PRE_DOWN=( )
 POST_DOWN=( )
-SAVE_CONFIG=0
 CONFIG_FILE=""
 PROGRAM="${0##*/}"
 ARGS=( "$@" )
@@ -94,7 +93,6 @@ parse_options() {
 			PreDown) PRE_DOWN+=( "$value" ); continue ;;
 			PostUp) POST_UP+=( "$value" ); continue ;;
 			PostDown) POST_DOWN+=( "$value" ); continue ;;
-			SaveConfig) read_bool SAVE_CONFIG "$value"; continue ;;
 			esac
 		fi
 		WG_CONFIG+="$line"$'\n'
@@ -102,32 +100,10 @@ parse_options() {
 	shopt -u nocasematch
 }

-read_bool() {
-	case "$2" in
-	true) printf -v "$1" 1 ;;
-	false) printf -v "$1" 0 ;;
-	*) die "\`$2' is neither true nor false"
-	esac
-}
-
 auto_su() {
 	[[ $UID == 0 ]] || exec sudo -p "$PROGRAM must be run as root. Please enter the password for %u to continue: " -- "$BASH" -- "$SELF" "${ARGS[@]}"
 }

-add_if() {
-	local ret rc
-	if ret="$(cmd ifconfig wg create name "$INTERFACE" 2>&1 >/dev/null)"; then
-		return 0
-	fi
-	rc=$?
-	if [[ $ret == *"ifconfig: ioctl SIOCSIFNAME (set name): File exists"* ]]; then
-		echo "$ret" >&3
-		return $rc
-	fi
-	echo "[!] Missing WireGuard kernel support ($ret). Falling back to slow userspace implementation." >&3
-	cmd "${WG_QUICK_USERSPACE_IMPLEMENTATION:-wireguard-go}" "$INTERFACE"
-}
-
 del_routes() {
 	local todelete=( ) destination gateway netif
 	while read -r destination _ _ _ _ netif _; do
@@ -336,48 +312,6 @@ add_route() {
 	fi
 }

-set_config() {
-	echo "$WG_CONFIG" | cmd wg setconf "$INTERFACE" /dev/stdin
-}
-
-save_config() {
-	local old_umask new_config current_config address cmd
-	new_config=$'[Interface]\n'
-	{ read -r _; while read -r _ _ _ address _; do
-		new_config+="Address = $address"$'\n'
-	done } < <(netstat -I "$INTERFACE" -n -W -f inet)
-	{ read -r _; while read -r _ _ _ address _; do
-		new_config+="Address = $address"$'\n'
-	done } < <(netstat -I "$INTERFACE" -n -W -f inet6)
-	while read -r address; do
-		[[ $address =~ ^nameserver\ ([a-zA-Z0-9_=+:%.-]+)$ ]] && new_config+="DNS = ${BASH_REMATCH[1]}"$'\n'
-	done < <(resolvconf -l "$INTERFACE" 2>/dev/null)
-	[[ -n $MTU ]] && new_config+="MTU = $MTU"$'\n'
-	[[ -n $TABLE ]] && new_config+="Table = $TABLE"$'\n'
-	[[ $SAVE_CONFIG -eq 0 ]] || new_config+=$'SaveConfig = true\n'
-	for cmd in "${PRE_UP[@]}"; do
-		new_config+="PreUp = $cmd"$'\n'
-	done
-	for cmd in "${POST_UP[@]}"; do
-		new_config+="PostUp = $cmd"$'\n'
-	done
-	for cmd in "${PRE_DOWN[@]}"; do
-		new_config+="PreDown = $cmd"$'\n'
-	done
-	for cmd in "${POST_DOWN[@]}"; do
-		new_config+="PostDown = $cmd"$'\n'
-	done
-	old_umask="$(umask)"
-	umask 077
-	current_config="$(cmd wg showconf "$INTERFACE")"
-	trap 'rm -f "$CONFIG_FILE.tmp"; clean_temp; exit' INT TERM EXIT
-	echo "${current_config/\[Interface\]$'\n'/$new_config}" > "$CONFIG_FILE.tmp" || die "Could not write configuration file"
-	sync "$CONFIG_FILE.tmp"
-	mv "$CONFIG_FILE.tmp" "$CONFIG_FILE" || die "Could not move configuration file"
-	trap 'clean_temp; exit' INT TERM EXIT
-	umask "$old_umask"
-}
-
 execute_hooks() {
 	local hook
 	for hook in "$@"; do
@@ -387,42 +321,10 @@ execute_hooks() {
 	done
 }

-cmd_usage() {
-	cat >&2 <<-_EOF
-	Usage: $PROGRAM [ up | down | save | strip ] [ CONFIG_FILE | INTERFACE ]
-
-	  CONFIG_FILE is a configuration file, whose filename is the interface name
-	  followed by \`.conf'. Otherwise, INTERFACE is an interface name, with
-	  configuration found at:
-	  ${CONFIG_SEARCH_PATHS[@]/%//INTERFACE.conf}.
-	  It is to be readable by wg(8)'s \`setconf' sub-command, with the exception
-	  of the following additions to the [Interface] section, which are handled
-	  by $PROGRAM:
-
-	  - Address: may be specified one or more times and contains one or more
-	    IP addresses (with an optional CIDR mask) to be set for the interface.
-	  - DNS: an optional DNS server to use while the device is up.
-	  - MTU: an optional MTU for the interface; if unspecified, auto-calculated.
-	  - Table: an optional routing table to which routes will be added; if
-	    unspecified or \`auto', the default table is used. If \`off', no routes
-	    are added.
-	  - PreUp, PostUp, PreDown, PostDown: script snippets which will be executed
-	    by bash(1) at the corresponding phases of the link, most commonly used
-	    to configure DNS. The string \`%i' is expanded to INTERFACE.
-	  - SaveConfig: if set to \`true', the configuration is saved from the current
-	    state of the interface upon shutdown.
-
-	See wg-quick(8) for more info and examples.
-	_EOF
-}
-
 cmd_up() {
 	local i
-	[[ -z $(ifconfig "$INTERFACE" 2>/dev/null) ]] || die "\`$INTERFACE' already exists"
 	trap 'del_if; del_routes; clean_temp; exit' INT TERM EXIT
-	add_if
 	execute_hooks "${PRE_UP[@]}"
-	set_config
 	for i in "${ADDRESSES[@]}"; do
 		add_addr "$i"
 	done
@@ -447,15 +349,6 @@ cmd_down() {
 	execute_hooks "${POST_DOWN[@]}"
 }

-cmd_save() {
-	[[ " $(wg show interfaces) " == *" $INTERFACE "* ]] || die "\`$INTERFACE' is not a WireGuard interface"
-	save_config
-}
-
-cmd_strip() {
-	echo "$WG_CONFIG"
-}
-
 # ~~ function override insertion point ~~

 make_temp
@@ -471,16 +364,7 @@ elif [[ $# -eq 2 && $1 == down ]]; then
 	auto_su
 	parse_options "$2"
 	cmd_down
-elif [[ $# -eq 2 && $1 == save ]]; then
-	auto_su
-	parse_options "$2"
-	cmd_save
-elif [[ $# -eq 2 && $1 == strip ]]; then
-	auto_su
-	parse_options "$2"
-	cmd_strip
 else
-	cmd_usage
 	exit 1
 fi

